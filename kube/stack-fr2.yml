#
##
### Written by the CAT team
##
#
heat_template_version: 2013-05-23

description: Kubernetes HA

parameters:
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  ceph:
    description: Activate Ceph
    label: Ceph
    type: string
    default: false

  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    default: cluster.local
    label: Cloud DNS
    type: string

  flavor:
    default: s1.cw.small-1
    description: Flavor to use for the deployed instances
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
          - s1.cw.small-1
          - n1.cw.standard-1
          - n2.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  node_count:
    default: 3
    label: Node Count
    description: Node counts
    type: number
    constraints:
      - range: { min: 1, max: 10 }

  token:
    default: averylongpassphraseatleast16chars
    label: Token
    type: string

  peer:
    default: 10.2.1.10
    label: Peer
    type: string

resources:
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.2.0.0/16
      allocation_pools:
        - { start: 10.2.1.10, end: 10.2.1.200 }

  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      external_gateway_info:
        enable_snat: true
        network: "public"

  stack_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: TCP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: UDP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress }

  nodes:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: { get_param: node_count }
      max_size: 20
      resource:
        type: kube-node.heat.yaml
        properties:
          token: { get_param: token }
          peer: { get_param: peer }
          domain: { get_param: domain }
          subnet: { get_resource: subnet }
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          keypair_name: { get_param: keypair_name }
          flavor_name: { get_param: flavor }
          os_region: fr2
          ceph: { get_param: ceph }
          floating_network: b5dd7532-1533-4b9c-8bf9-e66631a9be1d
  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
       adjustment_type: change_in_capacity
       auto_scaling_group_id: {get_resource: nodes}
       scaling_adjustment: 1
  scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: nodes}
      scaling_adjustment: -1
outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group. You can invoke the scale-up operation by doing an HTTP POST to this URL; no body nor extra headers are needed.
    value: {get_attr: [scaleup_policy, alarm_url]}
  scale_dn_url:
    description: >
      his URL is the webhook to scale down the autoscaling group. You can invoke the scale-down operation by doing an HTTP POST to this URL; no body nor extra headers are needed.
    value: {get_attr: [scaledown_policy, alarm_url]}
